//Parametri
real Nn = 50;
// pressure at inflow
real p0 = 0.;
real p1 = 0.;
real p2 = 0.;

//Funzioni
func invK11 = 1.;
func invK12 = 0.;//-part(x,y)*4999.5;
func invK22 = 1.;
func invK21 = invK12;

func f = 4.;

//MESH
mesh Th = square( Nn, Nn, flags = 1 );

//Spazi
fespace Vh ( Th, RT0 );
fespace Qh ( Th, P0 );

// solution and test function
Vh [uh1, uh2], [tauh1, tauh2];
Qh ph, qh;

// problem definition
problem Darcy ( [uh1, uh2, ph], [tauh1, tauh2, qh] , solver = GMRES, nbiter=15000 ) = -
                int2d(Th)( ( invK11 * uh1 + invK12 * uh2 ) * tauh1 +
                           ( invK21 * uh1 + invK22 * uh2 ) * tauh2 ) +
                int2d(Th)( ph * ( dx(tauh1) + dy(tauh2) ) ) +
                int2d(Th)( qh * ( dx(uh1)   + dy(uh2)   ) ) -
                int2d(Th)( qh * f ) -
                int1d(Th,1)(p2*(tauh1*N.x + tauh2*N.y) ) -
                int1d(Th,2)(p1*(tauh1*N.x + tauh2*N.y) ) -
                int1d(Th,3)(p0*(tauh1*N.x + tauh2*N.y) ) +
                on(4, uh1 = 0., uh2 = 0. );


Darcy;

cout << "Pressure, min " << ph[].min << " max " << ph[].max << endl;
cout << "Velocity min [" << uh1[].min << ", " << uh2[].min << "] max ["
     << uh1[].max << ", " << uh2[].max << "]" << endl;


plot ( ph, fill = true, nbiso = 20, value = true ); //, wait = true );
plot ( [uh1, uh2], fill = true, value = true ); //, wait = true );


