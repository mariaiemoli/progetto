/////////////////////////////////////////////////////////////////////////
///////////////// 	PROGETTO PACS		        /////////////////
/////////////////////////////////////////////////////////////////////////

/// CODICE PER CONFRONTARE I RISULTATI OTTENUTI CON IL MODELLO RIDOTTO PER LA PRESSIONE SULLA BIFORCAZIONE

bool plotYesNo = true;

// Import mesh file

// Spacing
int Nelem = 100;
int NelemI = 10;

include "mesh_bifurcation.edp"

// dual-mixed mathod

func invK11 = part(x,y)*1 + fracture0(x,y)*1 + fracture1(x,y)*1+ fracture2(x,y)*1;
func invK12 = 0;//-part(x,y)*4999.5;
func invK22 = part(x,y)*1 + fracture0(x,y)*1 + fracture1(x,y)*1+ fracture2(x,y)*1;
func invK21 = invK12;

func f = 0;

// pressure at inflow
real p0 = 1;
real p1 = 1;
real p2 = -1;

// Finite element spaces:
// Vh is the space for the vectorial base function (flux), Qh for the scalar (p)
fespace Vh ( Th, RT0 );
fespace Qh ( Th, P0 );

// solution and test function
Vh [uh1, uh2], [tauh1, tauh2];
Qh ph, qh, one;
one = part(x,y);

// problem definition
problem Darcy ( [uh1, uh2, ph], [tauh1, tauh2, qh], solver = GMRES/*, nbiter=5000 */) = -
                int2d(Th)( ( invK11 * uh1 + invK12 * uh2 ) * tauh1 +
                           ( invK21 * uh1 + invK22 * uh2 ) * tauh2 ) +
                int2d(Th)( ph * ( dx(tauh1) + dy(tauh2) ) ) +
                int2d(Th)( qh * ( dx(uh1)   + dy(uh2)   ) ) -
                int2d(Th)( qh * f ) -
                int1d(Th,54)(p2*(tauh1*N.x + tauh2*N.y) ) -
                int1d(Th,32)(p1*(tauh1*N.x + tauh2*N.y) ) -
                int1d(Th,10)(p0*(tauh1*N.x + tauh2*N.y) ) +
                on(3, uh1 = 0, uh2 = 0 );


//--------------------------------------------------------
// problem resolution
//--------------------------------------------------------


Darcy;

cout << "Pressure, min " << ph[].min << " max " << ph[].max << endl;
cout << "Velocity min [" << uh1[].min << ", " << uh2[].min << "] max ["
     << uh1[].max << ", " << uh2[].max << "]" << endl;


real I = int2d(ThI)( one );
real pI = 1./I * int2d(ThI)( ph );

cout << "Intersection pressure " << pI << endl;
cout << "Intersect area " << I << endl;


cout << "Lato 0 " << int1d(Th,42)( ph ) / int1d(Th, 42)( 1. ) << endl;
cout << "Lato 1 " << int1d(Th,41)( ph ) / int1d(Th, 41)( 1. ) << endl;
cout << "Lato 2 " << int1d(Th,40)( ph ) / int1d(Th, 40)( 1. ) << endl;


if ( plotYesNo )
{
    plot ( ph, fill = true, nbiso = 20, value = true, wait = true );
    plot ( [uh1, uh2], fill = true, value = true, wait = true );
}

