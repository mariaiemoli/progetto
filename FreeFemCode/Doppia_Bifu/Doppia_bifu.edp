/////////////////////////////////////////////////////////////////////////
///////////////// 	PROGETTO PACS		        /////////////////////////
/////////////////////////////////////////////////////////////////////////

/// CODICE PER CONFRONTARE I RISULTATI OTTENUTI CON IL MODELLO RIDOTTO PER LA PRESSIONE SULLA BIFORCAZIONE

bool plotYesNo = true;

// Import mesh file

real ODG = 1e3;

// Spacing
int Nelem = 1*ODG;
int NelemS = 10;
int NelemI = 10;

include "mesh.edp"

// dual-mixed func

func invK11 = part1(x,y)*1.+part2(x,y)*1. + fracture0(x,y)*1. + fracture1(x,y)*1. 
		+ fracture2(x,y)*1. + fracture3(x,y)*1. + fracture4(x,y)*1.;
func invK12 = 0.;//-part(x,y)*4999.5;
func invK22 = part1(x,y)*1.+part2(x,y)*1. + fracture0(x,y)*1. + fracture1(x,y)*1. 
		+ fracture2(x,y)*1. + fracture3(x,y)*1. + fracture4(x,y)*1.;
func invK21 = invK12;

func f = -0.04;

// pressure at inflow
real p0 = -1;
real p1 = 1;
real p2 = 1;
real p3 = -1;
real p4 = 1;


// Finite element spaces:
// Vh is the space for the vectorial base function (flux), Qh for the scalar (p)
fespace Vh ( Th, RT0 );
fespace Qh ( Th, P0 );


// solution and test function
Vh [uh1, uh2], [tauh1, tauh2];
Qh ph, qh, one, two, three, four, five; 
one = part1(x,y);
two = part2(x,y);

/*one = fracture0(x,y);*/
/*two = fracture1(x,y);*/
/*three = fracture2(x,y);*/
/*four = fracture3(x,y);*/
/*five = 200*fracture4(x,y);*/

/*plot(three, fill = true, nbiso = 20, value = true , wait = true, cmm="single" );*/

/*plot (one,two,three,four,five,  fill = true, nbiso = 20, value = true , wait = true );*/


// problem definition
problem Darcy ( [uh1, uh2, ph], [tauh1, tauh2, qh], solver=GMRES, init=100 ) = -
                int2d(Th)( ( invK11 * uh1 + invK12 * uh2 ) * tauh1 +
                           ( invK21 * uh1 + invK22 * uh2 ) * tauh2 ) +
                int2d(Th)( ph * ( dx(tauh1) + dy(tauh2) ) ) +
                int2d(Th)( qh * ( dx(uh1)   + dy(uh2)   ) ) -
                int2d(Th)( qh * f ) -
                int1d(Th,13)(p0*(tauh1*N.x + tauh2*N.y) ) -
                int1d(Th,12)(p1*(tauh1*N.x + tauh2*N.y) ) -
                int1d(Th,11)(p4*(tauh1*N.x + tauh2*N.y) ) -
                int1d(Th,10)(p2*(tauh1*N.x + tauh2*N.y) ) +
	        on(3, uh1 = 0, uh2 = 0);


//--------------------------------------------------------
// problem resolution
//--------------------------------------------------------

Darcy;


cout << "Pressure, min " << ph[].min << " max " << ph[].max << endl;
cout << "Velocity min [" << uh1[].min << ", " << uh2[].min << "] max ["
     << uh1[].max << ", " << uh2[].max << "]" << endl;

cout << "Lato 0 " << int1d(Th1,20)( ph ) / int1d(Th1, 20)( 1. ) << endl;
cout << "Lato 1 " << int1d(Th1,21)( ph ) / int1d(Th1, 21)( 1. ) << endl;
cout << "Lato 31 " << int1d(Th1,22)( ph ) / int1d(Th1, 22)( 1. ) << endl;
cout << "Lato 32 " << int1d(Th2,23)( ph ) / int1d(Th2, 23)( 1. ) << endl;
cout << "Lato 4 " << int1d(Th2,24)( ph ) / int1d(Th2, 24)( 1. ) << endl;
cout << "Lato 2 " << int1d(Th2,25)( ph ) / int1d(Th2, 25)( 1. ) << endl;

real I = int2d(Th1)( one );
real pI = 1./I * int2d(Th1)( ph );

cout << "Intersection pressure bifurcation " << pI << endl;
cout << "Intersect area " << I << endl;

I = int2d(Th2)( two );
pI = 1./I * int2d(Th2)( ph );

cout << "Intersection pressure bifurcation2 " << pI << endl;
cout << "Intersect area " << I << endl;




if ( plotYesNo )
{
    plot ( ph, fill = true, nbiso = 20, value = true , wait = true, ps = "pressione" );
    plot ( [uh1, uh2], fill = true, value = true , wait = true, ps="flusso" );
}

