/////////////////////////////////////////////////////////////////////////
///////////////// 	PROGETTO PACS		        /////////////////
/////////////////////////////////////////////////////////////////////////

/// CODICE PER CONFRONTARE I RISULTATI OTTENUTI CON IL MODELLO RIDOTTO PER LA PRESSIONE SULLA BIFORCAZIONE

// esempio : 2 biforcazioni con 5 fratture, Bifurcation06

// Spacing
/*int Nelem = 120;*/
/*int NelemI = 10;*/
/*int NelemS = 1;*/

/*bool plotYesNo = true;*/


///////////////////////////////////////////////////
// definiamo le rette che rappresentano le fratture

// prima frattura y = a0*x+b0
real a0 = -1.;
real b0 = 0.52;

// seconda frattura y = a1*x+b1
real a1 = 3.1;
real b1 = -0.341;

// terza frattura  x = a2 , y = 0.8-0.8*t
real a2 = 0.7;

// quarta frattura  y = a3*x+b3
real a3 = 1.;
real b3 = 0.1;

// quinta frattura y = a4*x+b4
real a4 = -1.;
real b4 = 1.5;



// spessore delle fratture
real d0 = 0.0013;
real d1 = 0.0014;
real d2 = 0.0012;
real d3 = 0.001;
real d4 = 0.0013;



// lunghezza delle fratture lungo x

real length0x = 0.31;
real length1x = 0.1;
real length2x = 0.;
real length2y = 0.8;
real length3x = 0.49;
real length4x = 0.2;


///////////////////////////////////////////////////
// definiamo i punti di intersezione

real interFrac1 = ( b1 - b0 ) / ( a0 - a1 );
real interFrac2 = ( b4 - b3 ) / ( a3 - a4 );

cout << "Intersection Point Bifurcation1: " << interFrac1 << endl;
cout << "Intersection Point Bifurcation2: " << interFrac2 << endl;
cout << "b4:  " << b4 << "  b3:  " << b3 << "   a3:   " << a3 << "  a4:  " << a4 << endl;


///////////////////////////////////////////////////
// definiamo i punti che costituiscono i triangoli di intersezione

// punti che costituiscono il triangolo della prima biforcazione
real intx10 = ( ( b1 - d1/2. ) - ( b0 - d0/2. ) ) / ( a0 - a1 );
real inty10 = a0*intx10 + b0 - d0/2.;

real intx11 = ( ( b3 - d3/2. ) - ( b0 + d0/2. ) ) / ( a0 - a3 );
real inty11 = a0*intx11 + b0 + d0/2.;

real intx12 = ( ( b1 + d1/2. ) - ( b3 + d3/2. ) ) / ( a3 - a1 );
real inty12 = a3*intx12 + b3 + d3/2.;

cout << "primo triangolo: " << intx10 << "   " << intx11 << "   " << intx12 << endl;
// punti che costituiscono il triangolo della seconda biforcazione
real intx20 = a2-d2/2.;
real inty20 = a3*intx20 + b3 - d3/2.;

real intx21 = a2+d2/2.;
real inty21 = a4*intx21 + b4 + d4/2.;

real intx22 = ( ( b3 + d3/2. ) - ( b4 - d4/2. ) ) / ( a4 - a3 );
real inty22 = a3*intx22 + b3 + d3/2.;

cout << "secondo triangolo: ( " << intx20 << ", " << inty20 << ")  ( " << intx21 << ", " << inty21 << ")  ( " 
				<< intx22 << ", " << inty22 << " ) " << endl;

///////////////////////////////////////////////////
// definiamo i segmenti che costituiscono i triangoli di intersezione

// segmenti che definiscono il triangolo della prima biforcazione
// inside10: y = e10*x + f10
real e10 = ( inty11 - inty10 )/( intx11 - intx10 );
real f10 = ( inty10 - e10*intx10 );

// inside11: y = e11*x + f11
real e11 = ( inty11 - inty12 )/( intx11 - intx12 );
real f11 = ( inty12 - e11*intx12 );

// inside12: y = e12*x + f12
real e12 = ( inty12 - inty10 )/( intx12 - intx10 );
real f12 = ( inty10 - e12*intx10 );


// segmenti che definiscono il triangolo della seconda biforcazione
// inside20: y = e20*x + f20
real e20 = ( inty21 - inty20 )/( intx21 - intx20 );
real f20 = ( inty20 - e20*intx20 );

// inside21: y = e21*x + f21
real e21 = ( inty21 - inty22 )/( intx21 - intx22 );
real f21 = ( inty22 - e21*intx22 );

// inside22: y = e22*x + f22
real e22 = ( inty22 - inty20 )/( intx22 - intx20 );
real f22 = ( inty20 - e22*intx20 );

cout << " e20: " << e20 << "  f20:  " << f20 << endl;
cout << " e21: " << e21 << "  f21:  " << f21 << endl;
cout << " e22: " << e22 << "  f22:  " << f22 << endl;

///////////////////////////////////////////////////
// definiamo i segmenti che costituiscono il dominio delle fratture

real ext0 = ( ( interFrac1 + length0x )*( a0 + 1./a0 ) + d0/2.  )/( a0 + 1./a0 );
real ext1 = ( - d0/2. + ( interFrac1 + length0x )*( a0 + 1./a0 )  )/( a0 + 1./a0 );

real ext2 = a2-d2/2.;
real ext3 = a2+d2/2.;

real ext4 = ( ( interFrac2 - length4x )*( a4 + 1./a4 ) - d4/2. )/( a4 + 1./a4 );
real ext5 = ( ( interFrac2 - length4x )*( a4 + 1./a4 ) + d4/2. )/( a4 + 1./a4 );

real ext6 = ( ( interFrac1 - length1x )*( a1 + 1./a1 ) - d1/2. )/( a1 + 1./a1 );
real ext7 = ( ( interFrac1 - length1x )*( a1 + 1./a1 ) + d1/2. )/( a1 + 1./a1 );


///////////////////////////////////////////////////
// definiamo i bordi della mesh

border long0 ( t = ext1, intx11 ) { x = t; y = a0*t+b0+d0/2.; label = 3; }
border long1 ( t = intx11, intx20 ) { x = t; y = a3*t+b3-d3/2.; label = 3; }
border long2 ( t = inty20, 0 ) { x = a2-d2/2.; y = t; label = 3; }

border short0 ( t = ext2, ext3 ) { x = t; y = 0; label = 10;}

border long3 ( t = 0, inty21 ) { x = a2+d2/2.; y = t; label = 3; }
border long4 ( t = intx21, ext4 ) { x = t; y = a4*t+b4+d4/2.; label = 3; }

border short1 ( t = ext4, ext5 ) { x = t; y = -t*1./a4 + b4 + ( interFrac2 - length4x )*( a4 + 1./a4 ); label = 11;}

border long5 ( t = ext5, intx22 ) { x = t; y = a4*t+b4-d4/2.; label = 3; }
border long6 ( t = intx22, intx12 ) { x = t; y = a3*t+b3+d3/2.; label = 3; }

border long7 ( t = intx12, ext6 ) { x = t; y = a1*t+b1+d1/2.; label = 3; }

border short2 ( t = ext6, ext7 ) { x = t; y = -t*1./a1 + b1 + ( interFrac1 - length1x )*( a1 + 1./a1 ); label = 12; }

border long8 ( t = ext7, intx10 ) { x = t; y = a1*t+b1-d1/2.; label = 3; }
border long9 ( t = intx10, ext0 ) { x = t; y = a0*t+b0-d0/2.; label = 3; }

border short3 ( t = ext0, ext1 ) { x = t; y = -t*1./a0 + b0 + ( interFrac1+ length0x )*( a0 + 1./a0 ); label = 13; }

border inside10 ( t = intx10, intx11 ) { x = t; y = e10*t+f10; label = 20; }
border inside11 ( t = intx11, intx12 ) { x = t; y = e11*t+f11; label = 22; }
border inside12 ( t = intx12, intx10 ) { x = t; y = e12*t+f12; label = 21; }

border inside20 ( t = intx20, intx21 ) { x = t; y = e20*t+f20; label = 25; }
border inside21 ( t = intx21, intx22 ) { x = t; y = e21*t+f21; label = 24; }
border inside22 ( t = intx22, intx20 ) { x = t; y = e22*t+f22; label = 23; }



///////////////////////////////////////////////////
// costruiamo la mesh

mesh Th = buildmesh ( long0( Nelem ) + long1( Nelem*4 ) + long2( Nelem*2 ) + 
		      short0( Nelem*d2*NelemS ) + 
		      long3( Nelem*2 ) + long4( Nelem ) +
                      short1( Nelem*d4*NelemS ) +
                      long5( Nelem ) + long6( Nelem*6 ) + long7( Nelem ) +
                      short2( Nelem*d1*NelemS ) + 
		      long8( Nelem ) + long9( Nelem ) +
  		      short3( Nelem*d0*NelemS ) + 
   		      inside10( NelemI*Nelem*d0 ) + inside11( NelemI*Nelem*d3 ) + inside12( NelemI*Nelem*d1 ) +
		      inside20( NelemI*Nelem*d2 ) + inside21( NelemI*Nelem*d4 ) + inside22( NelemI*Nelem*d3 ) );


plot ( Th, wait = true );



///////////////////////////////////////////////////
// definiamo le fratture

func fracture0 = (y-a0*x-b0-d0/2.<=0)*(y-a0*x-b0+d0/2.>=0)*(1.*(y-e10*x-f10<=0));
func fracture1 = (y-a1*x-b1+d1/2.>=0)*(y-a1*x-b1-d1/2.<=0)*(1.*(y-e12*x-f12<=0));
func fracture3 = (y-a3*x-b3-d3/2.<=0)*(y-a3*x-b3+d3/2.>=0)*(1.*(y-e11*x-f11>=0))*( 1.*(y-e22*x-f22>=0) );


func fracture2 = (x-a2-d2/2.<=0)*(x-a2+d2/2.>=0)*(1.*(y-e20*x-f20<=0));
func fracture4 = (y-a4*x-b4-d4/2.<=0)*(y-a4*x-b4+d4/2.>=0)*(1.*(y-e21*x-f21>=0));


///////////////////////////////////////////////////
// definiamo i domini di intersezione

func part1 = (y-e10*x-f10 >=0)*(y-e11*x-f11<=0)*(y-e12*x-f12>=0);
func part2 = (y-e20*x-f20 >=0)*(y-e21*x-f21<=0)*(y-e22*x-f22<=0);

/*plot( inside10(NelemI*Nelem*d0) + inside11(NelemI*Nelem*d3) + inside12(NelemI*Nelem*d1), wait=1 );*/
/*plot ( inside20(NelemI*Nelem*d2) + inside21(NelemI*Nelem*d4) + inside22(NelemI*Nelem*d3), wait=1, cmm="tr" );*/

mesh Th1 = buildmesh ( inside10(NelemI*Nelem*d0) + inside11(NelemI*Nelem*d3) + inside12(NelemI*Nelem*d1) );

mesh Th2 = buildmesh ( inside20(NelemI*Nelem*d2) + inside21(NelemI*Nelem*d4) + inside22(NelemI*Nelem*d3) );


if ( plotYesNo )
{
    plot ( Th , wait = true, cmm = " mesh " );
    plot ( Th1 , wait = true, cmm = " triangolo prima biforcazione " );
    plot ( Th2 , wait = true, cmm = " triangolo seconda biforcazione " );
}


