#ifndef FRACTUREHANDLER_H_
#define FRACTUREHANDLER_H_ 1

#include "FractureData.h"
#include "BCHandler.h"
#include "LevelSetHandler.h"

class FractureHandler
{
public:
    FractureHandler ( const GetPot& dataFile,
                      const size_type& ID,
                      const std::string& section = "fractureData/" );

    void init ( );

    void normalVectorAndMap ( const getfem::mesh_fem& mediumMeshFEMPressure );

    void computeInvH ( const BCHandlerPtr_Type& bcHandler );

    inline const getfem::mesh& getMeshFlat ( ) const
    {
        return M_meshFlat;
    }

    inline getfem::mesh& getMeshFlat ( )
    {
        return M_meshFlat;
    }

    inline const getfem::mesh_fem& getMeshFEMVelocity ( ) const
    {
        return M_meshFEMVelocity;
    }

    inline const getfem::mesh_fem& getMeshFEMPressure ( ) const
    {
        return M_meshFEMPressure;
    }

    inline const getfem::mesh_im& getIntegrationMethodVelocity ( ) const
    {
        return M_integrationMethodVelocity;
    }

    inline const getfem::mesh_im& getIntegrationMethodPressure ( ) const
    {
        return M_integrationMethodPressure;
    }

    inline FractureData& getData ( )
    {
        return M_data;
    }

    inline LevelSetHandlerPtr_Type& getLevelSet ( )
    {
        return M_levelSet;
    }

    inline const scalarVector_Type& getEtaNormalInterpolated ( ) const
    {
        return M_etaNormalInterpolated;
    }

    inline const scalarVector_Type& getEtaTangentialInterpolated ( ) const
    {
        return M_etaTangentialInterpolated;
    }

    inline const scalar_type& getEtaTangentialInterpolated ( const size_type& dof ) const
    {
        return M_etaTangentialInterpolated [ dof ];
    }

    inline const scalarVector_Type& getInverseMeshSize ( ) const
    {
        return M_inverseMeshSize;
    }

    inline const scalar_type& getInverseMeshSize ( const size_type& dof ) const
    {
        return M_inverseMeshSize [ dof ];
    }

    inline const scalarVector_Type& getMagnificationMapFactor1 ( ) const
    {
        return M_magnificationMapFactor1;
    }

    inline const scalar_type& getMagnificationMapFactor1 ( const size_type& dof ) const
    {
        return M_magnificationMapFactor1 [ dof ];
    }

    inline const scalarVector_Type& getMagnificationMapFactor2 ( ) const
    {
        return M_magnificationMapFactor2;
    }

    inline const scalar_type& getMagnificationMapFactor2 ( const size_type& dof ) const
    {
        return M_magnificationMapFactor2 [ dof ];
    }

    inline const bgeot::pgeometric_trans& getGeometricTransformation ( ) const
    {
        return M_geometricTransformation;
    }

    inline const scalarVector_Type& getNormal1 ( ) const
    {
        return M_normal1;
    }

    inline const scalarVector_Type& getNormal2 ( ) const
    {
        return M_normal2;
    }

    inline const getfem::mesh& getMeshMapped ( ) const
    {
        return M_meshMapped;
    }

    inline const scalarVector_Type& getMuNormalInterpolated ( ) const
    {
        return M_muNormalInterpolated;
    }

    inline const scalarVector_Type& getMuTangentialInterpolated ( ) const
    {
        return M_muTangentialInterpolated;
    }

    inline const getfem::mesh_im& getIntegrationMethodPressureVisualization ( ) const
    {
        return M_integrationMethodPressureVisualization;
    }

    inline const getfem::mesh_fem& getMeshFEMPressureVisualization ( ) const
    {
        return M_meshFEMPressureVisualization;
    }

    inline const getfem::mesh_fem& getMeshFEMLinear ( ) const
    {
        return M_meshFEMLinear;
    }

    inline const size_type& getId() const
    {
        return M_ID;
    }

private:

    size_type M_ID;

    FractureData M_data;

    LevelSetHandlerPtr_Type M_levelSet;

    // the M_mediummesh for the fracture: M_meshFlat is "flat", M_meshMapped is mapped (z(x))
    getfem::mesh M_meshFlat;
    getfem::mesh M_meshMapped;

    // eta_gamma = d/K_normale - vector
    scalarVector_Type M_etaNormalInterpolated;
    // eta_t=1/(K_t*d) - vector
    scalarVector_Type M_etaTangentialInterpolated;

    // mu_gamma = d/mu_normale - vector
    scalarVector_Type M_muNormalInterpolated;
    // mu_t=1/(mu_t*d) - vector
    scalarVector_Type M_muTangentialInterpolated;

    // integration method (velocity)
    getfem::mesh_im M_integrationMethodVelocity;
    // integration method (pressure)
    getfem::mesh_im M_integrationMethodPressure;
    // integration method (pressure)
    getfem::mesh_im M_integrationMethodPressureVisualization;

    //elementi finiti
    // mesh_fem for pressure
    getfem::mesh_fem M_meshFEMPressure;
    // mesh_fem for pressure
    getfem::mesh_fem M_meshFEMPressureVisualization;
    getfem::mesh_fem M_meshFEMVelocity;

    //fattore di scala nella mappatura fra frattura piana e mappata
    scalarVector_Type M_magnificationMapFactor1;
    //fattore di scala nella mappatura fra frattura piana e mappata
    scalarVector_Type M_magnificationMapFactor2;

    //componenti della normale
    scalarVector_Type M_normal1;
    scalarVector_Type M_normal2;

    // M_mediumInverseMeshSize = 1.0 / M_mediumMeshSize; per la frattura
    scalarVector_Type M_inverseMeshSize;

    // Geometric transformation usign pressure finite elements type
    bgeot::pgeometric_trans M_geometricTransformation;

    // integration method (velocity)
    getfem::mesh_im M_integrationMethodLinear;
    // mesh_fem for coefficients
    getfem::mesh_fem M_meshFEMLinear;

};

typedef FractureHandler FractureHandler_Type;
typedef boost::shared_ptr<FractureHandler_Type> FractureHandlerPtr_Type;
typedef std::vector<FractureHandlerPtr_Type> FracturePtrContainer_Type;
typedef std::vector<FractureHandler_Type> FractureContainer_Type;
typedef boost::shared_ptr<FracturePtrContainer_Type> FracturePtrContainerPtr_Type;

#endif /* FRACTUREHANDLER_H_ */
